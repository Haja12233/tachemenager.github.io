HTML :
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Matrice 4x4 - Gestion de Tâche</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="notification-banner">Tâche complète ! ??</div>

    <div class="container">
        <h1>Gestion des Tâches</h1>

        <div class="grid">
            <div class="cell required-yellow" id="a1" data-initial-text="Local">
                <span class="cell-content placeholder">Local</span>
                <div class="dropdown-menu"></div>
                <div class="action-buttons">
                </div>
            </div>
            <div class="cell empty-cell" id="b1"></div>
            <div class="cell empty-cell" id="c1"></div>
            <div class="cell required-yellow" id="d1" data-initial-text="Utilisateur">
                <span class="cell-content placeholder">Utilisateur</span>
                <div class="dropdown-menu"></div>
            </div>

            <div class="cell" id="a2" data-initial-text="Début Tâche">
                <span class="cell-content placeholder">Début</span>
            </div>
            <div class="cell empty-cell" id="b2"></div>
            <div class="cell required-yellow" id="c2" data-initial-text="">
                <span class="cell-content placeholder">Contrôle Rat</span>
            </div>
            <div class="cell empty-cell" id="d2"></div>

            <div class="cell" id="a3" data-initial-text="Fin Tâche">
                <span class="cell-content placeholder">Fin</span>
            </div>
            <div class="cell empty-cell" id="b3"></div>
            <div class="cell required-yellow" id="c3" data-initial-text="Contrôle Xylophage">
                <span class="cell-content placeholder">Contrôle Xylophage</span>
            </div>
            <div class="cell empty-cell" id="d3"></div>

            <div class="cell optional-cell" id="a4" data-initial-text="A4">
                <span class="cell-content placeholder">A4</span>
                <div class="dropdown-menu"></div>
            </div>
            <div class="cell optional-cell" id="b4" data-initial-text="B4">
                <span class="cell-content placeholder">B4</span>
                <div class="dropdown-menu"></div>
            </div>
            <div class="cell optional-cell" id="c4" data-initial-text="C4">
                <span class="cell-content placeholder">C4</span>
                <div class="dropdown-menu"></div>
            </div>
            <div class="cell optional-cell" id="d4" data-initial-text="D4">
                <span class="cell-content placeholder">D4</span>
                <div class="dropdown-menu"></div>
            </div>
        </div>

        <button id="refresh-button">?? Actualiser toutes les cases</button>

        <div id="task-results-table-container"></div>
    </div>

    <script src="index.js"></script>
</body>
</html>

CSS : 
/* style.css */

:root {
    --primary-color: #0056b3;
    --primary-hover-color: #00448a;
    --success-color: #28a745;
    --success-hover-color: #218838;
    --text-color: #333;
    --secondary-text-color: #6c757d;
    --border-color: #e0e0e0;
    --bg-color: #f8f9fa;
    --card-bg-color: #ffffff;
    --shadow-light: 0 2px 8px rgba(0, 0, 0, 0.05);
    /* Changement : Jaune pour les cases obligatoires */
    --required-color: #FFF05C; /* Jaune or modifié */
    /* Nouvelle couleur pour les cellules A1/D1 sélectionnées */
    --selected-user-locale-color: #d4edda; /* Vert clair, similaire à optional-cell */
    --selected-user-locale-border: #28a745; /* Bordure verte */
}

body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    background-color: var(--bg-color);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    padding: 8px;
}

.container {
    width: 98%;
    max-width: 450px;
    background: var(--card-bg-color);
    padding: 12px;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
}

h1 {
    text-align: center;
    color: var(--primary-color);
    margin-bottom: 15px;
    font-size: 1.4rem;
    font-weight: 600;
}

.grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 6px;
}

.cell {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    aspect-ratio: 1/1;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    color: var(--text-color);
    background-color: var(--card-bg-color);
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    padding: 4px;
    text-align: center;
    word-break: break-word;
    box-sizing: border-box;
}

/* Style pour les cases obligatoires (maintenant jaune) */
.cell.required-yellow {
    background-color: var(--required-color);
}
.cell.required-yellow:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Nouveau style pour A1/D1 après sélection */
.cell.user-locale-selected {
    background-color: var(--selected-user-locale-color) !important;
    border-color: var(--selected-user-locale-border) !important;
    color: var(--success-color); /* Texte vert foncé */
    font-weight: 600;
}

.cell.user-locale-selected .cell-content {
    color: var(--success-color); /* S'assurer que le texte est vert */
    font-style: normal; /* Pas d'italique */
}

.cell.user-locale-selected:hover {
    background-color: #c3e6cb !important; /* Un peu plus foncé au survol */
    border-color: var(--success-hover-color) !important;
}

/* Texte principal unifié */
.cell-content {
    font-weight: 500;
    text-align: center;
    overflow: hidden;
    text-overflow: ellipsis;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    padding: 2px;
    box-sizing: border-box;
    font-size: 11px;
}

/* Pour les boutons */
.cell button {
    width: 100%;
    height: 100%;
    border: none;
    background: var(--primary-color);
    color: white;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.2s;
    padding: 3px;
    font-size: 9px;
}

/* Texte des placeholders */
.cell-content.placeholder {
    font-style: italic;
    color: var(--secondary-text-color);
    font-size: 9px;
}

/* Ajustement spécifique pour le texte "Sélectionnez Locale" */
.placeholder-text {
    color: #888;
    font-style: italic;
    font-size: 9px !important;
}

.cell#c2 {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4px;
}

.cell:hover:not(.empty-cell):not(.default-user-active):not(.user-locale-selected) {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-light);
}

.empty-cell {
    background-color: var(--bg-color);
    border: 1px dashed var(--border-color);
    cursor: default;
}

/* Texte spécifique pour C2 */
#c2 .cell-content {
    font-size: 12px;
    font-weight: 500;
}

.cell .button-container {
    display: flex;
    gap: 5px;
    width: 100%;
    height: 100%;
    justify-content: center;
    align-items: center;
}

.cell .choice-button {
    flex-grow: 1;
    height: 80%;
    background: var(--bg-color);
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
    border-radius: 5px;
    font-weight: bold;
    transition: all 0.2s;
    font-size: 11px;
}

.cell .choice-button:hover {
    background: var(--primary-color);
    color: white;
}
.cell-footer {
    font-size: 9px;
    color: #555;
    margin-top: 2px;
    text-align: center;
}
/* Ajustement pour les dropdown des cases facultatives */
.optional-cell .dropdown-menu {
    top: calc(100% + 3px);
    bottom: auto;
}

/* S'assurer que les dropdown sont visibles */
.dropdown-menu {
    z-index: 1000;
}

/* Styles pour la liste des lieux */
.location-container {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
    align-items: center;
    justify-content: center;
}

.location-list {
    display: flex;
    flex-direction: column;
    gap: 2px;
    width: 100%;
    max-height: 80%;
    overflow-y: auto;
}

.location-item {
    padding: 3px 5px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    background-color: var(--card-bg-color);
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    font-size: 9px;
    margin: 1px 0;
    box-sizing: border-box;
}

.location-item:hover {
    background-color: #e9ecef;
}

.location-item.empty {
    font-style: italic;
    color: var(--secondary-text-color);
}

.list-add-button {
    padding: 2px 4px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    background-color: var(--primary-color);
    color: white;
    font-weight: bold;
    text-align: center;
    cursor: pointer;
    transition: background-color 0.2s;
    font-size: 12px;
    width: 100%;
    margin-top: auto;
}

.list-add-button:hover {
    background-color: var(--primary-hover-color);
}

.add-button {
    width: 100%;
    padding: 5px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 5px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
    margin-top: 5px;
    font-size: 12px;
    line-height: 1;
}

.add-button:hover {
    background-color: var(--primary-hover-color);
}

.dropdown-menu {
    display: none;
    position: absolute;
    top: calc(100% + 3px);
    left: 0;
    width: 100%;
    background-color: var(--card-bg-color);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    z-index: 100; /* Ajouté ou modifié */
    max-height: 120px;
    overflow-y: auto;
}

.dropdown-menu.show { display: block; }

.dropdown-item {
    padding: 6px 8px;
    cursor: pointer;
    border-bottom: 1px solid var(--border-color);
    transition: background-color 0.2s;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 10px;
}

.dropdown-item:last-child { border-bottom: none; }
.dropdown-item:hover { background-color: var(--bg-color); }
.dropdown-item-content { flex-grow: 1; }

.add-item {
    font-size: 14px;
    padding: 5px 10px;
    color: var(--primary-color);
    font-weight: bold;
    text-align: center;
}

/* Styles pour le texte et le fond de la case C3 */
#c3.text-green {
    background-color: #99ff99;
    color: #28a745;
}

#c3.text-red {
    background-color: #ff9999;
    color: #dc3545;
}

.default-user {
    opacity: 0.8;
    font-style: italic;
    font-weight: 500;
}

.default-user-active {
    cursor: default;
    background-color: #e9f0f6;
    border-color: var(--primary-color);
}

/* Styles pour les items de la liste dans C2 */
.location-item.text-green-c2 {
    background-color: #d4edda !important;
    color: #155724 !important;
}

.location-item.text-red-c2 {
    background-color: #f8d7da !important;
    color: #721c24 !important;
}

/* --- NOUVEAU : Styles pour la case C2 condensée --- */
.c2-condensed-green {
    background-color: #99ff99;
    color: #28a745;
    font-weight: bold;
    font-size: 16px;
}

.c2-condensed-red {
    background-color: #ff9999;
    color: #dc3545;
    font-weight: bold;
    font-size: 16px;
}

#refresh-button {
    margin-top: 15px;
    padding: 8px 16px;
    background-color: var(--success-color);
    color: white;
    border: none;
    border-radius: 5px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s, transform 0.2s;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    font-size: 12px;
    width: 100%;
}

#refresh-button:hover {
    background-color: var(--success-hover-color);
    transform: translateY(-1px);
}

#notification-banner {
    position: fixed;
    top: 10px;
    left: 50%;
    transform: translateX(-50%);
    padding: 8px 16px;
    background-color: var(--success-color);
    color: white;
    font-weight: bold;
    border-radius: 5px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    z-index: 100;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.5s ease-in-out, visibility 0.5s;
    pointer-events: none;
    max-width: 90%;
    text-align: center;
    font-size: 12px;
}

#notification-banner.show {
    opacity: 1;
    visibility: visible;
}

/* Scrollbar Style */
::-webkit-scrollbar {
    width: 5px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 6px;
}

::-webkit-scrollbar-thumb {
    background: #c0c0c0;
    border-radius: 6px;
}

::-webkit-scrollbar-thumb:hover {
    background: #a0a0a0;
}

/* Styles pour les boutons d'action dans A1 */
#a1 .action-buttons {
    display: flex;
    flex-direction: column;
    gap: 3px;
    width: 100%;
    position: absolute;
    bottom: 5px;
    left: 0;
    padding: 0 5px;
    box-sizing: border-box;
}

.pause-btn, .fin-btn {
    padding: 2px 4px;
    border: 1px solid var(--border-color);
    border-radius: 2px;
    background-color: #f8f9fa;
    color: var(--text-color);
    font-size: 8px;
    cursor: pointer;
    transition: background-color 0.2s;
}

/* Changement : Couleur de fond du bouton Pause en Jaune au survol */
.pause-btn:hover {
    background-color: var(--required-color); /* Jaune */
    border-color: #e0a800;
}

.fin-btn:hover {
    background-color: #d4edda;
    border-color: #28a745;
}

/* S'assurer que le contenu de A1 reste centré */
#a1 {
    display: flex;
    flex-direction: column;
    justify-content: center; /* Centrer verticalement */
    align-items: center;     /* Centrer horizontalement */
    /* padding-bottom: 40px; */ /* Supprimer ou commenter ce padding si les boutons ne sont plus là */
    padding: 4px; /* Utiliser le padding standard des autres cellules */
}
/* Optionnel : Ajuster le conteneur du texte si nécessaire */
#a1 .cell-content {
    /* Les styles existants devraient suffire, mais vous pouvez ajouter si besoin */
    /* flex-grow: 1; */
    /* display: flex; */
    /* align-items: center; */
    /* justify-content: center; */
}
/* Style pour les cases facultatives (vert) */
.optional-cell {
    background-color: #e8f5e8 !important;
    border-color: #a8d8a8 !important;
}

.optional-cell .cell-content {
    color: var(--success-color); /* Texte en vert foncé */
    font-weight: 600; /* Plus de gras */
    font-style: normal; /* Pas d'italique */
}

.optional-cell:hover {
    background-color: #d4edda !important;
    border-color: #28a745 !important;
}

/* Styles pour le tableau de résultats */
#task-results-table-container {
    margin-top: 20px;
    width: 100%;
    overflow-x: auto; /* Permet le défilement horizontal si le tableau est large */
}

#task-results-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 10px;
    margin-top: 15px;
}

#task-results-table th,
#task-results-table td {
    border: 1px solid #ddd;
    padding: 4px;
    text-align: left;
}

#task-results-table thead th {
    background-color: #e9ecef;
    position: sticky; /* Rend les en-têtes fixes lors du défilement vertical */
    top: 0;
    z-index: 1;
}

#task-results-table tbody tr {
    border-bottom: 1px solid #ddd;
}

#task-results-table tbody tr:nth-child(even) {
    background-color: #f9f9f9; /* Ligne de fond alternée pour une meilleure lisibilité */
}
/* --- NOUVEAU : Styles pour les cellules verrouillees --- */
.cell-locked {
    position: relative;
    pointer-events: none; /* Empêche les interactions (clics, etc.) */
    opacity: 0.7; /* Rendre légèrement transparent pour l'indication visuelle */
}

/* Ajouter un pseudo-element pour l'icône du cadenas */
.cell-locked::after {
    content: "??"; /* Unicode pour l'icône cadenas */
    position: absolute;
    top: 2px;
    right: 2px;
    font-size: 10px; /* Ajuster la taille si nécessaire */
    z-index: 101; /* Assurer qu'il est au-dessus du contenu de la cellule */
    background-color: rgba(255, 255, 255, 0.7); /* Fond semi-transparent pour mieux le voir */
    border-radius: 3px;
    padding: 1px;
}

/* Optionnel : S'assurer que le bandeau de notification s'affiche au-dessus des cadenas */
#notification-banner {
    /* ... styles existants ... */
    z-index: 1000; /* Doit etre superieur au z-index du ::after */
}

JS :
// index.js (CORRIGE et COMPLET - Toutes fonctionnalites integrees + PAUSE/REPRENDRE conditionnel)
// Ce code est destine a etre execute apres le chargement complet du DOM.
// Assurez-vous qu'il est appele ou encapsule correctement (ex: dans DOMContentLoaded).
// --- VARIABLES ET CONFIGURATION GLOBALES ---
const initialUsers = ['Anniva', 'Tina'];
let initialLocales = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9', 'P10'];
let defaultUser = null, defaultUserExpiry = null;
const requiredCells = ['a1', 'a2', 'a3', 'c2', 'c3', 'd1'];
let activeMenu = null;
const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbz7NrE1iwl4vthz2Sxx3DIOoRXrSkq8nolvjefXo-w-KdBaP948MGa19hRanVgR5EQK/exec';
// Variables pour le suivi des taches
let taskHistory = [];
let currentTaskIndex = 0;
let selectedLocale = null;
let startTime = null;
// Nouvelles variables pour la gestion du temps
let taskStartTime = null;
let taskPauseTime = null;
let taskEndTime = null;
let isTaskPaused = false; // Variable pour suivre l'etat de pause
let previousTaskEndTime = null;
// Stockage pour les resultats a afficher dans le tableau
let displayedTaskResults = [];
// --- FONCTIONS UTILITAIRES ---
function createDropdownItem(text) {
    const item = document.createElement('div');
    item.className = 'dropdown-item';
    const span = document.createElement('span');
    span.className = 'dropdown-item-content';
    span.textContent = text;
    item.appendChild(span);
    return item;
}
function createDropdownButtonItem(text, id) {
    const item = document.createElement('div');
    item.className = 'dropdown-item';
    item.id = id;
    item.style.fontWeight = 'bold';
    item.style.cursor = 'pointer';
    const span = document.createElement('span');
    span.className = 'dropdown-item-content';
    span.textContent = text;
    item.appendChild(span);
    return item;
}
function showNotification(message, isCompletion = false) {
    const notification = document.getElementById('notification-banner');
    if (notification) {
        notification.textContent = message;
        notification.classList.add('show');
        setTimeout(() => {
            notification.classList.remove('show');
            if (isCompletion) resetAll();
        }, 2000);
    }
}
function updateCurrentDate() {
    const dateElement = document.getElementById('current-date-display');
    if (dateElement) {
        const now = new Date();
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        dateElement.textContent = now.toLocaleDateString('fr-FR', options);
    }
}
// --- FONCTIONS DE GESTION DES DONNEES (LocalStorage) ---
function saveResults() {
    const results = {};
    const cellsToSave = ['a1', 'a2', 'a3', 'a4', 'b4', 'c2', 'c3', 'c4', 'd1', 'd4'];
    cellsToSave.forEach(id => {
        const cell = document.getElementById(id);
        if (!cell) return;
        const contentSpan = cell.querySelector('.cell-content');
        const contentButton = cell.querySelector('button:not(.choice-button)');
        let currentValue = '', color = '';
        if (id === 'c2') {
            const locationList = cell.querySelector('.location-list');
            const contentSpanC2 = cell.querySelector('.cell-content');
            if (locationList) {
                const locationsWithColor = Array.from(locationList.querySelectorAll('.location-item')).map(item => {
                    let c = 'none';
                    if (item.classList.contains('text-green-c2')) c = 'green';
                    if (item.classList.contains('text-red-c2')) c = 'red';
                    return { text: item.textContent.trim(), color: c };
                });
                currentValue = JSON.stringify(locationsWithColor);
            } else if (contentSpanC2) {
                currentValue = contentSpanC2.textContent.trim();
            } else {
                currentValue = '';
            }
        } else if (contentSpan) {
            currentValue = contentSpan.textContent.trim();
            if (cell.classList.contains('text-red')) color = 'red';
        } else if (contentButton) {
            currentValue = contentButton.textContent.trim();
        }
        const initialText = cell.getAttribute('data-initial-text');
        // Sauvegarder si une valeur existe et est differente du texte initial
        // OU si c'est une cellule optionnelle (car "Vide" est leur etat)
        if (currentValue && (currentValue !== initialText || ['a4', 'b4', 'c4', 'd4'].includes(id))) {
            results[id] = { value: currentValue, color: color };
        }
    });
    localStorage.setItem('taskResults', JSON.stringify(results));
}
function loadResults() {
    const savedResults = localStorage.getItem('taskResults');
    // Initialiser les cellules optionnelles avec "Vide"
    const optionalCells = ['a4', 'b4', 'c4', 'd4'];
    optionalCells.forEach(id => {
        const cell = document.getElementById(id);
        if (cell) {
            const contentSpan = cell.querySelector('.cell-content');
            if (contentSpan) {
                contentSpan.textContent = 'Vide';
                contentSpan.classList.remove('placeholder');
            }
        }
    });
    if (savedResults) {
        const results = JSON.parse(savedResults);
        for (const id in results) {
            const cell = document.getElementById(id);
            if (!cell) continue;
            if (id === 'c2') {
                const value = results[id].value;
                try {
                    const locationsWithColor = JSON.parse(value);
                    if (Array.isArray(locationsWithColor)) {
                        showC2LocationList(locationsWithColor);
                        const container = cell.querySelector('.location-list');
                        if (container) {
                            container.innerHTML = '';
                            locationsWithColor.forEach(loc => {
                                const locationItem = document.createElement('div');
                                locationItem.className = 'location-item';
                                locationItem.textContent = loc.text;
                                if (loc.color === 'green') {
                                    locationItem.classList.add('text-green-c2');
                                    locationItem.dataset.colorState = '1';
                                } else if (loc.color === 'red') {
                                    locationItem.classList.add('text-red-c2');
                                    locationItem.dataset.colorState = '2';
                                } else {
                                    locationItem.dataset.colorState = '0';
                                }
                                container.appendChild(locationItem);
                            });
                        }
                    } else {
                        condenseC2(value);
                    }
                } catch (e) {
                    const contentSpan = document.createElement('span');
                    contentSpan.className = 'cell-content';
                    contentSpan.textContent = value;
                    cell.innerHTML = '';
                    cell.appendChild(contentSpan);
                }
            } else {
                const contentSpan = cell.querySelector('.cell-content');
                const contentButton = cell.querySelector('button');
                if (contentSpan) {
                    contentSpan.textContent = results[id].value;
                    contentSpan.classList.remove('placeholder');
                    cell.classList.remove('required-yellow', 'text-green', 'text-red');
                    if (results[id].color === 'red') cell.classList.add('text-red');
                    const initialText = cell.getAttribute('data-initial-text');
                    if (results[id].value && results[id].value !== initialText) {
                        cell.classList.remove('required-yellow');
                    }
                } else if (contentButton) {
                    contentButton.textContent = results[id].value;
                }
            }
        }
    }
}
function saveTaskHistory() {
    localStorage.setItem('taskHistory', JSON.stringify(taskHistory));
    localStorage.setItem('currentTaskIndex', currentTaskIndex.toString());
    localStorage.setItem('displayedTaskResults', JSON.stringify(displayedTaskResults));
}
function loadTaskHistory() {
    const savedHistory = localStorage.getItem('taskHistory');
    const savedIndex = localStorage.getItem('currentTaskIndex');
    const savedDisplayedResults = localStorage.getItem('displayedTaskResults');
    if (savedHistory) taskHistory = JSON.parse(savedHistory);
    if (savedIndex) currentTaskIndex = parseInt(savedIndex);
    if (savedDisplayedResults) {
        displayedTaskResults = JSON.parse(savedDisplayedResults);
        renderTaskResultsTable();
    }
}
function saveDefaultUser() {
    if (defaultUser) {
        localStorage.setItem('defaultUserD1', JSON.stringify({
            user: defaultUser,
            expiry: defaultUserExpiry
        }));
    }
}
function loadDefaultUser() {
    const defaultUserData = localStorage.getItem('defaultUserD1');
    if (defaultUserData) {
        const userData = JSON.parse(defaultUserData);
        if (userData.expiry > Date.now()) {
            defaultUser = userData.user;
            defaultUserExpiry = userData.expiry;
            const cell = document.getElementById('d1');
            const contentSpan = cell?.querySelector('.cell-content');
            if (contentSpan) {
                contentSpan.textContent = defaultUser;
                contentSpan.classList.remove('placeholder');
                contentSpan.classList.add('default-user');
                cell.classList.remove('required-yellow');
                cell.classList.add('default-user-active');
                // Ajout de la classe pour le fond vert
                cell.classList.add('user-locale-selected');
            }
            updateD1MenuWithDefault();
        } else {
            localStorage.removeItem('defaultUserD1');
        }
    }
}
// --- FONCTIONS DE GESTION DES CELLULES ---
function resetAllExceptA1D1A3() {
    const cellsToReset = ['a2', 'a4', 'b4', 'c2', 'c3', 'c4', 'd4'];
    cellsToReset.forEach(id => {
        const cell = document.getElementById(id);
        if (!cell) return;
        if (id === 'c2') {
            showC2Buttons();
        } else {
            const initialText = cell.getAttribute('data-initial-text');
            const contentSpan = cell.querySelector('.cell-content');
            if (contentSpan) {
                contentSpan.textContent = initialText;
                contentSpan.classList.add('placeholder');
                contentSpan.classList.remove('default-user');
            }
        }
        cell.classList.remove('text-green', 'text-red', 'default-user-active', 'c2-condensed-green', 'c2-condensed-red');
        if (['c2', 'c3'].includes(id)) {
            cell.classList.add('required-yellow');
        }
        cell.dataset.colorState = '0';
    });
    localStorage.removeItem('taskResults');
    updateResults();
}
function manualRefresh() {
    const cellsToReset = ['a1', 'a2', 'a4', 'b4', 'c2', 'c3', 'c4', 'd1', 'd4'];
    cellsToReset.forEach(id => {
        const cell = document.getElementById(id);
        if (!cell) return;
        if (id === 'c2') {
            showC2Buttons();
        } else {
            const initialText = cell.getAttribute('data-initial-text');
            const contentSpan = cell.querySelector('.cell-content');
            if (contentSpan) {
                 if (['a4', 'b4', 'c4', 'd4'].includes(id)) {
                     contentSpan.textContent = 'Vide';
                     contentSpan.classList.remove('placeholder');
                 } else {
                     contentSpan.textContent = initialText;
                     contentSpan.classList.add('placeholder');
                     contentSpan.classList.remove('default-user');
                 }
            }
        }
        cell.classList.remove('text-green', 'text-red', 'default-user-active', 'c2-condensed-green', 'c2-condensed-red', 'user-locale-selected');
        if (['a1', 'c2', 'c3', 'd1'].includes(id)) {
            cell.classList.add('required-yellow');
        }
        cell.dataset.colorState = '0';
    });
    localStorage.removeItem('taskResults');
    defaultUser = null;
    defaultUserExpiry = null;
    localStorage.removeItem('defaultUserD1');
    updateA1Menu();
    updateD1MenuWithDefault();
    showNotification('Toutes les cases ont été réinitialisées ! ??');
}
function checkCompletion() {
    for (const id of requiredCells) {
        const cell = document.getElementById(id);
        if (!cell) return false;
        if (id === 'c2') {
            const contentSpan = cell.querySelector('.cell-content');
            if (!contentSpan || !contentSpan.textContent.trim().match(/^[0-9]+R$|^xR$/)) {
                return false;
            }
        } else if (id === 'a3') {
             // Verifier que A3 n'est pas dans son etat initial/placeholder
             const contentSpan = cell.querySelector('.cell-content');
             const initialText = cell.getAttribute('data-initial-text');
             if (!contentSpan || contentSpan.textContent.trim() === initialText || contentSpan.classList.contains('placeholder')) {
                 return false; // A3 doit avoir ete modifie (ex: "Fin" affiche)
             }
        } else {
            const initialText = cell.getAttribute('data-initial-text');
            const contentSpan = cell.querySelector('.cell-content');
            const contentButton = cell.querySelector('button');
            let currentValue = contentSpan ? contentSpan.textContent.trim() : (contentButton ? contentButton.textContent.trim() : '');
            if (!currentValue || currentValue === initialText) return false;
        }
    }
    return true;
}
// --- FONCTIONS POUR LA CELLULE D1 (Utilisateur) ---
function setDefaultUser(name) {
    defaultUser = name;
    defaultUserExpiry = Date.now() + 28800000;
    const cell = document.getElementById('d1');
    const contentSpan = cell?.querySelector('.cell-content');
    if (contentSpan) {
        contentSpan.textContent = defaultUser;
        contentSpan.classList.remove('placeholder');
        contentSpan.classList.add('default-user');
        cell.classList.remove('required-yellow');
        cell.classList.add('default-user-active');
        // Ajout de la classe pour le fond vert
        cell.classList.add('user-locale-selected');
    }
    saveDefaultUser();
    updateD1MenuWithDefault();
    showNotification(`Utilisateur "${defaultUser}" défini par défaut pour 8h !`);
}
function updateD1MenuWithDefault() {
    const menu = document.querySelector('#d1 .dropdown-menu');
    if (menu) {
        menu.innerHTML = '';
        if (defaultUser) {
            const defaultItem = createDropdownItem(`? ${defaultUser} (par défaut)`);
            defaultItem.classList.add('default-user-item');
            menu.appendChild(defaultItem);
        }
        initialUsers.forEach(user => {
            if (user !== defaultUser) {
                menu.appendChild(createDropdownItem(user));
            }
        });
        const addItem = createDropdownItem('+');
        addItem.classList.add('add-item');
        menu.appendChild(addItem);
    }
}
// --- FONCTIONS POUR LA CELLULE A1 (Locale) ---
function updateA1Menu() {
    const menu = document.querySelector('#a1 .dropdown-menu');
    if (menu) {
        menu.innerHTML = '';
        initialLocales.forEach(locale => {
            menu.appendChild(createDropdownItem(locale));
        });
        // Ajouter un separateur visuel
        const separator = document.createElement('div');
        separator.className = 'dropdown-item-separator';
        separator.style.borderTop = '1px solid var(--border-color)';
        separator.style.margin = '4px 0';
        menu.appendChild(separator);
        // Creer et ajouter le bouton PAUSE
        const pauseItem = createDropdownButtonItem('?? PAUSE', 'dropdown-pause-btn-a1');
        if (isTaskPaused) {
            pauseItem.style.backgroundColor = 'var(--required-color)'; // Jaune
            pauseItem.querySelector('.dropdown-item-content').textContent = '?? REPRENDRE';
        }
        menu.appendChild(pauseItem);
        // Creer et ajouter le bouton FIN
        const finItem = createDropdownButtonItem('?? FIN', 'dropdown-fin-btn-a1');
        finItem.style.color = 'var(--success-color)';
        menu.appendChild(finItem);
    }
}
function showA1Buttons() {
    updateA1Menu();
    const oldButtonContainer = document.getElementById('a1')?.querySelector('.action-buttons');
    if (oldButtonContainer) {
        oldButtonContainer.style.display = 'none';
    }
}
// --- FONCTIONS POUR LA CELLULE C2 ---
function showC2Buttons() {
    const cell = document.getElementById('c2');
    if (cell) {
        cell.innerHTML = `<span class="cell-content placeholder-text">Sélectionnez Locale</span>`;
        cell.classList.remove('c2-condensed-green', 'c2-condensed-red');
        cell.classList.add('required-yellow');
    }
}
function showC2LocationList(locationsWithColor) {
    const c2Cell = document.getElementById('c2');
    if (c2Cell) {
        c2Cell.innerHTML = `
            <div class="location-container">
                <div class="location-list"></div>
                <div class="list-add-button" id="add-locale-c2">+</div>
            </div>`;
        c2Cell.classList.remove('c2-condensed-green', 'c2-condensed-red');
        c2Cell.classList.add('required-yellow');
        const container = c2Cell.querySelector('.location-list');
        if (container && locationsWithColor) {
            locationsWithColor.forEach(loc => {
                const locationItem = document.createElement('div');
                locationItem.className = 'location-item';
                locationItem.textContent = loc.text;
                if (loc.color === 'green') {
                    locationItem.classList.add('text-green-c2');
                    locationItem.dataset.colorState = '1';
                } else if (loc.color === 'red') {
                    locationItem.classList.add('text-red-c2');
                    locationItem.dataset.colorState = '2';
                } else {
                    locationItem.dataset.colorState = '0';
                }
                container.appendChild(locationItem);
            });
        }
        const addButton = c2Cell.querySelector('#add-locale-c2');
        if (addButton) {
            addButton.addEventListener('click', function (e) {
                e.stopPropagation();
                handleListAdd(c2Cell);
            });
        }
    }
}
function loadControlLocationsForLocale(locale, useSavedData = false) {
    const c2Cell = document.getElementById('c2');
    if (!c2Cell) return;
    c2Cell.innerHTML = `<span class="cell-content">Chargement...</span>`;
    if (useSavedData) {
        const savedResults = localStorage.getItem('taskResults');
        if (savedResults) {
            try {
                const results = JSON.parse(savedResults);
                if (results['c2'] && results['c2'].value) {
                    const locationsWithColor = JSON.parse(results['c2'].value);
                    if (Array.isArray(locationsWithColor)) {
                        showC2LocationList(locationsWithColor);
                        return;
                    }
                }
            } catch (e) {
                console.error("Erreur lors du chargement des données sauvegardées:", e);
            }
        }
    }
    const url = `${SCRIPT_URL}?locale=${encodeURIComponent(locale)}`;
    fetch(url)
        .then(response => response.json())
        .then(data => {
            const locations = (data.success && data.data) ? data.data : [];
            if (locale === 'P1') {
                const defaultLocations = ['Chambre', 'Terrasse'];
                defaultLocations.forEach(loc => {
                    if (!locations.includes(loc)) {
                        locations.push(loc);
                    }
                });
            }
            if (locations.length > 0) {
                const locationsWithColor = locations.map(loc => ({ text: loc, color: 'none' }));
                showC2LocationList(locationsWithColor);
            } else {
                condenseC2('R');
            }
        })
        .catch(error => {
            console.error('Erreur lors du chargement des lieux de contrôle:', error);
            condenseC2('Erreur');
        });
}
function condenseC2(value) {
    const c2Cell = document.getElementById('c2');
    if (c2Cell) {
        c2Cell.innerHTML = `<span class="cell-content">${value}</span>`;
        c2Cell.classList.remove('required-yellow');
        if (value.endsWith('R')) {
            const redCount = parseInt(value.slice(0, -1));
            if (redCount > 0) {
                c2Cell.classList.add('c2-condensed-red');
            } else {
                c2Cell.classList.add('c2-condensed-green');
            }
        } else {
            c2Cell.classList.add('c2-condensed-green');
        }
    }
}
// --- FONCTIONS POUR LES CELLULES A4, B4, C4, D4 ---
function updateA4Menu() {
    const menu = document.querySelector('#a4 .dropdown-menu');
    if (menu) {
        menu.innerHTML = '';
        const items = ["Vide", "01", "02", "10", "11", "12", "20", "21", "11"];
        items.forEach(itemText => {
            menu.appendChild(createDropdownItem(itemText));
        });
    }
}
function updateB4Menu() {
    const menu = document.querySelector('#b4 .dropdown-menu');
    if (menu) {
        menu.innerHTML = '';
        const items = ["Vide", "1", "2", "3"];
        items.forEach(itemText => {
            menu.appendChild(createDropdownItem(itemText));
        });
    }
}
function updateC4Menu() {
    const menu = document.querySelector('#c4 .dropdown-menu');
    if (menu) {
        menu.innerHTML = '';
        const items = ["Vide", "1", "2", "3"];
        items.forEach(itemText => {
            menu.appendChild(createDropdownItem(itemText));
        });
    }
}
function updateD4Menu() {
    const menu = document.querySelector('#d4 .dropdown-menu');
    if (menu) {
        menu.innerHTML = '';
        const items = ["Vide", "1", "2", "3", "4", "5"];
        items.forEach(itemText => {
            menu.appendChild(createDropdownItem(itemText));
        });
    }
}
// --- FONCTIONS DE TRAITEMENT DES RESULTATS ET TABLEAU ---
function addToDisplayedResults(taskData) {
    const pavillon = taskData.locale || '';
    const debut = taskData.startTimeFormatted || '';
    const fin = taskData.endTimeFormatted || '';
    const utilisateur = taskData.user || '';
    const isDuplicate = displayedTaskResults.some(result => result.pavillon === pavillon);
    const isInInitialList = initialLocales.includes(pavillon);
    if (isDuplicate || !isInInitialList) {
        if (isDuplicate) {
            alert(`Le pavillon ${pavillon} a déjà été enregistré.`);
        } else {
            alert(`Le pavillon ${pavillon} n'est pas dans la liste des pavillons valides.`);
        }
        return;
    }
    const getCellValue = (id) => {
        const cell = document.getElementById(id);
        if (!cell) return '';
        const contentSpan = cell.querySelector('.cell-content');
        if (contentSpan) {
            return contentSpan.textContent.trim();
        }
        const contentButton = cell.querySelector('button');
        if (contentButton) {
            return contentButton.textContent.trim();
        }
        return '';
    };
    const getCellValueOrDefault = (id) => {
        const cell = document.getElementById(id);
        if (!cell) return '';
        const contentSpan = cell.querySelector('.cell-content');
        if (contentSpan && contentSpan.classList.contains('placeholder')) {
            if (['a4', 'b4', 'c4', 'd4'].includes(id)) {
                return 'Vide';
            }
        }
        return getCellValue(id);
    };
    const a4 = getCellValueOrDefault('a4');
    const b4 = getCellValueOrDefault('b4');
    const c2Raw = getCellValue('c2');
    let c2 = '';
    const c2Cell = document.getElementById('c2');
    if (c2Cell?.querySelector('.location-list')) {
        const redCount = Array.from(c2Cell.querySelectorAll('.location-item.text-red-c2')).length;
        if (redCount > 0) {
            c2 = `${redCount}R`;
        } else {
            c2 = 'xR';
        }
    } else {
        c2 = c2Raw;
    }
    const c3Cell = document.getElementById('c3');
    const c3ContentSpan = c3Cell?.querySelector('.cell-content');
    let c3Value = '';
    let c3ColorClass = '';
    if (c3ContentSpan && c3ContentSpan.textContent.trim() === 'X') {
        c3Value = 'X';
        if (c3Cell?.classList.contains('text-green')) {
            c3ColorClass = 'text-green';
        } else if (c3Cell?.classList.contains('text-red')) {
            c3ColorClass = 'text-red';
        }
    } else {
        c3Value = c3ContentSpan ? c3ContentSpan.textContent.trim() : '';
    }
    const c4 = getCellValueOrDefault('c4');
    const d4 = getCellValueOrDefault('d4');
    const tableRowData = {
        pavillon, debut, fin, utilisateur,
        a4, b4, c2,
        c3: { value: c3Value, colorClass: c3ColorClass },
        c4, d4
    };
    displayedTaskResults.push(tableRowData);
    saveTaskHistory();
    renderTaskResultsTable();
}
function renderTaskResultsTable() {
    const container = document.getElementById('task-results-table-container');
    if (!container) return;
    if (displayedTaskResults.length === 0) {
        container.innerHTML = '<p style="margin-top: 15px; text-align: center;">Aucun résultat à afficher pour le moment.</p>';
        return;
    }
    let tableHTML = `
    <table id="task-results-table" style="width: 100%; border-collapse: collapse; font-size: 10px; margin-top: 15px;">
        <thead><tr style="background-color: #e9ecef;">
            <th style="border: 1px solid #ddd; padding: 4px;">Pavillon</th>
            <th style="border: 1px solid #ddd; padding: 4px;">Début</th>
            <th style="border: 1px solid #ddd; padding: 4px;">Fin</th>
            <th style="border: 1px solid #ddd; padding: 4px;">Utilisateur</th>
            <th style="border: 1px solid #ddd; padding: 4px;">A4</th>
            <th style="border: 1px solid #ddd; padding: 4px;">B4</th>
            <th style="border: 1px solid #ddd; padding: 4px;">C2</th>
            <th style="border: 1px solid #ddd; padding: 4px;">C3</th>
            <th style="border: 1px solid #ddd; padding: 4px;">C4</th>
            <th style="border: 1px solid #ddd; padding: 4px;">D4</th>
        </tr></thead>
        <tbody>`;
    displayedTaskResults.forEach(row => {
        tableHTML += `<tr style="border-bottom: 1px solid #ddd;">`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.pavillon || ''}</td>`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.debut || ''}</td>`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.fin || ''}</td>`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.utilisateur || ''}</td>`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.a4 || ''}</td>`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.b4 || ''}</td>`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.c2 || ''}</td>`;
        let c3Display = '';
        if (typeof row.c3 === 'object' && row.c3.value === 'X') {
            let c3Style = '';
            if (row.c3.colorClass === 'text-green') {
                c3Style = 'color: #28a745; font-weight: bold;';
            } else if (row.c3.colorClass === 'text-red') {
                c3Style = 'color: #dc3545; font-weight: bold;';
            }
            c3Display = `<span style="${c3Style}">${row.c3.value}</span>`;
        } else {
            c3Display = typeof row.c3 === 'object' ? row.c3.value : row.c3 || '';
        }
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${c3Display}</td>`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.c4 || ''}</td>`;
        tableHTML += `<td style="border: 1px solid #ddd; padding: 4px;">${row.d4 || ''}</td>`;
        tableHTML += `</tr>`;
    });
    tableHTML += `</tbody></table>`;
    container.innerHTML = tableHTML;
}
// --- FONCTIONS DE GESTION DES EVENEMENTS ---

// --- NOUVELLE FONCTION : Verifier si C2 et C3 sont remplis ---
function areC2AndC3Filled() {
    let isC2Filled = false;
    let isC3Filled = false;

    // Vérifier C2
    const c2Cell = document.getElementById('c2');
    if (c2Cell) {
        const contentSpan = c2Cell.querySelector('.cell-content');
        // Vérifier si le contenu se termine par 'R' (condensé) ou s'il y a une liste avec des éléments
        if (contentSpan && contentSpan.textContent.trim().match(/^[0-9]+R$|^xR$/)) {
            isC2Filled = true;
        } else if (c2Cell.querySelector('.location-list')) {
            // Si la liste est ouverte, considérer comme rempli (l'utilisateur a interagi)
            isC2Filled = true;
        }
    }

    // Vérifier C3
    const c3Cell = document.getElementById('c3');
    if (c3Cell) {
        const c3State = parseInt(c3Cell.dataset.colorState || 0);
        // L'état 0 signifie non touché. États 1 (vert) et 2 (rouge) signifient touché.
        if (c3State === 1 || c3State === 2) {
            isC3Filled = true;
        }
    }

    return isC2Filled && isC3Filled;
}

// --- NOUVELLE FONCTION : Verrouiller/Deverrouiller les cellules ---
function toggleCellLocks(lock) {
    // Liste des cellules qui peuvent être verrouillées/déverrouillées
    const cellsToLock = ['a1', 'a2', 'a4', 'b4', 'c2', 'c3', 'c4', 'd1', 'd4'];
    cellsToLock.forEach(id => {
        const cell = document.getElementById(id);
        if (cell) {
            if (lock) {
                cell.classList.add('cell-locked');
            } else {
                cell.classList.remove('cell-locked');
            }
        }
    });
}

function handleA1Click(e) {
    // Empecher l'interaction si la tâche est en pause
    if (isTaskPaused) {
        e.stopPropagation();
        showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
        return;
    }
    e.stopPropagation();
    const menu = this.querySelector('.dropdown-menu');
    if (menu) {
        if (activeMenu && activeMenu !== menu) {
            activeMenu.classList.remove('show');
        }
        updateA1Menu(); // Toujours mettre a jour le menu avant de l'afficher
        menu.classList.toggle('show');
        activeMenu = menu.classList.contains('show') ? menu : null;
    }
}
function handleFinTask() {
    const c3Cell = document.getElementById('c3');
    const c3ColorState = parseInt(c3Cell?.dataset.colorState || 0);
    if (c3ColorState === 0) {
        alert("Veuillez sélectionner une valeur pour la case 'Contrôle Xylophage' (C3) avant de terminer la tâche.");
        return;
    }
    if (checkCompletion()) {
        // --- AFFICHAGE DE "Fin" DANS A3 UNIQUEMENT ---
        const a3ContentSpan = document.getElementById('a3')?.querySelector('.cell-content');
        if (a3ContentSpan) {
            a3ContentSpan.textContent = 'Fin';
            a3ContentSpan.classList.remove('placeholder');
        }
        // --- CAPTURE DE L'HEURE REELLE DE FIN ---
        const realFinTime = new Date();
        const realFinTimeFormatted = realFinTime.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
        // --- RECUPERATION DE L'HEURE REELLE DE DEBUT DEPUIS A2 ---
        const a2ContentSpan = document.getElementById('a2')?.querySelector('.cell-content');
        const realStartTimeFormatted = a2ContentSpan && !a2ContentSpan.classList.contains('placeholder') ? a2ContentSpan.textContent : '';
        const taskData = {
            locale: selectedLocale,
            user: document.getElementById('d1')?.querySelector('.cell-content')?.textContent,
            startTimeFormatted: realStartTimeFormatted, // Heure reelle de debut
            endTimeFormatted: realFinTimeFormatted,     // Heure reelle de fin
            a4: document.getElementById('a4')?.querySelector('.cell-content')?.textContent,
            b4: document.getElementById('b4')?.querySelector('.cell-content')?.textContent,
            c2: document.getElementById('c2')?.querySelector('.cell-content')?.textContent,
            c3: c3Cell?.querySelector('.cell-content')?.textContent,
            c4: document.getElementById('c4')?.querySelector('.cell-content')?.textContent,
            d4: document.getElementById('d4')?.querySelector('.cell-content')?.textContent
        };
        addToDisplayedResults(taskData);
        sendDataToSheets(taskData);
        setTimeout(() => {
            resetAllExceptA1D1A3();
            showNotification('Tâche complète ! ??', true);
        }, 1000);
    } else {
        alert('Veuillez remplir toutes les cases obligatoires (jaunes) avant de finir la tâche.');
    }
}

// --- FONCTION MODIFIEE : handlePauseTask ---
function handlePauseTask() {
    if (isTaskPaused) {
        // Si la tâche est deja en pause, la reprendre
        isTaskPaused = false;
        toggleCellLocks(false); // Debloquer les cellules
        showNotification('Tâche reprise ! ??');
    } else {
        // Si la tâche n'est pas en pause, vérifier C2 et C3 avant de la mettre en pause
        if (areC2AndC3Filled()) {
            isTaskPaused = true;
            toggleCellLocks(true); // Bloquer les cellules
            showNotification('Tâche mise en pause ??');
        } else {
            // Message specifique pour C2 et C3
            alert('Veuillez remplir les cases C2 et C3 avant de mettre la tâche en pause.');
            return; // Sortir si la condition n'est pas remplie
        }
    }
    updateA1Menu(); // Mettre a jour l'etat du bouton PAUSE dans le menu
}

function handleListAdd(cell) {
    // Empecher l'interaction si la tâche est en pause
    if (isTaskPaused) {
        showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
        return;
    }
    const newLocation = prompt("Veuillez entrer le nom du nouveau lieu :");
    if (newLocation === null) return;
    const trimmedLocation = newLocation.trim();
    if (trimmedLocation === '') {
        alert("Le nom du lieu ne peut pas être vide.");
        return;
    }
    const existingItems = cell.querySelectorAll('.location-item');
    for (let item of existingItems) {
        if (item.textContent.trim().toLowerCase() === trimmedLocation.toLowerCase()) {
            alert(`Le lieu "${trimmedLocation}" existe déjà dans la liste.`);
            return;
        }
    }
    const locationItem = document.createElement('div');
    locationItem.className = 'location-item';
    locationItem.textContent = trimmedLocation;
    locationItem.dataset.colorState = '0';
    const list = cell.querySelector('.location-list');
    if (list) {
        list.appendChild(locationItem);
        updateResults();
    } else {
        alert("Erreur : Impossible de trouver la liste pour ajouter le lieu.");
    }
}
function savePreviousTaskState(previousLocale) {
    const pavillon = previousLocale || '';
    const debutElement = document.getElementById('a2')?.querySelector('.cell-content');
    const debut = debutElement && !debutElement.classList.contains('placeholder') ? debutElement.textContent : '';
    const finElement = document.getElementById('a3')?.querySelector('.cell-content');
    let fin = '';
    if (finElement && !finElement.classList.contains('placeholder') && finElement.textContent.trim() !== 'Fin') {
        fin = finElement.textContent;
    } else {
        fin = new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
    }
    const utilisateurElement = document.getElementById('d1')?.querySelector('.cell-content');
    const utilisateur = utilisateurElement && !utilisateurElement.classList.contains('placeholder') ? utilisateurElement.textContent : '';
    const getCellValue = (id) => {
        const cell = document.getElementById(id);
        if (!cell) return '';
        const contentSpan = cell.querySelector('.cell-content');
        if (contentSpan) return contentSpan.textContent.trim();
        const contentButton = cell.querySelector('button');
        if (contentButton) return contentButton.textContent.trim();
        return '';
    };
    const getCellValueOrDefault = (id) => {
        const cell = document.getElementById(id);
        if (!cell) return '';
        const contentSpan = cell.querySelector('.cell-content');
        if (contentSpan && contentSpan.classList.contains('placeholder')) {
            if (['a4', 'b4', 'c4', 'd4'].includes(id)) {
                return 'Vide';
            }
        }
        return getCellValue(id);
    };
    const a4 = getCellValueOrDefault('a4');
    const b4 = getCellValueOrDefault('b4');
    const c2Raw = getCellValue('c2');
    let c2 = '';
    const c2Cell = document.getElementById('c2');
    if (c2Cell?.querySelector('.location-list')) {
        const redCount = Array.from(c2Cell.querySelectorAll('.location-item.text-red-c2')).length;
        if (redCount > 0) {
            c2 = `${redCount}R`;
        } else {
            c2 = 'xR';
        }
    } else {
        c2 = c2Raw;
    }
    const c3Cell = document.getElementById('c3');
    const c3ContentSpan = c3Cell?.querySelector('.cell-content');
    let c3Value = '';
    let c3ColorClass = '';
    if (c3ContentSpan && c3ContentSpan.textContent.trim() === 'X') {
        c3Value = 'X';
        if (c3Cell?.classList.contains('text-green')) {
            c3ColorClass = 'text-green';
        } else if (c3Cell?.classList.contains('text-red')) {
            c3ColorClass = 'text-red';
        }
    } else {
        if (c3ContentSpan && !c3ContentSpan.classList.contains('placeholder')) {
            c3Value = c3ContentSpan.textContent.trim();
        } else {
            c3Value = c3ContentSpan ? c3ContentSpan.textContent.trim() : 'Vide';
            if (c3ContentSpan && c3ContentSpan.classList.contains('placeholder')) {
                c3Value = 'Vide';
            }
        }
    }
    const c4 = getCellValueOrDefault('c4');
    const d4 = getCellValueOrDefault('d4');
    const isDuplicate = displayedTaskResults.some(result => result.pavillon === pavillon);
    const isInInitialList = initialLocales.includes(pavillon);
    if (isDuplicate || !isInInitialList) {
        return;
    }
    const tableRowData = {
        pavillon, debut, fin, utilisateur,
        a4, b4, c2,
        c3: { value: c3Value, colorClass: c3ColorClass },
        c4, d4
    };
    displayedTaskResults.push(tableRowData);
    saveTaskHistory();
    renderTaskResultsTable();
}
function sendDataToSheets(data) {
    const formData = new FormData();
    for (const key in data) {
        if (data.hasOwnProperty(key)) {
            formData.append(key, data[key]);
        }
    }
    fetch(SCRIPT_URL, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(result => {
        console.log('Données envoyées avec succès:', result);
    })
    .catch(error => {
        console.error('Erreur lors de l\'envoi des données:', error);
    });
}
function updateResults() {
    saveResults();
}
// --- INITIALISATION ET ECOUTEURS D'EVENEMENTS ---
document.addEventListener('DOMContentLoaded', function () {
    // Initialisation
    loadDefaultUser();
    updateA1Menu();
    updateA4Menu();
    updateB4Menu();
    updateC4Menu();
    updateD4Menu();
    loadResults();
    loadTaskHistory();

    // --- NOUVEAU ECOUTEUR : Empecher l'interaction avec les cellules si la tâche est en pause ---
    document.querySelectorAll('.cell').forEach(cell => {
        // Ecouteurs pour les cellules avec menus deroulants
        if (['b4', 'c4', 'a4', 'd4', 'd1'].includes(cell.id)) {
            cell.addEventListener('click', function (e) {
                 // Empecher l'interaction si la tâche est en pause
                if (isTaskPaused) {
                    e.stopPropagation();
                    showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
                    return;
                }
                e.stopPropagation();
                const menu = this.querySelector('.dropdown-menu');
                if (menu) {
                    if (activeMenu && activeMenu !== menu) {
                        activeMenu.classList.remove('show');
                    }
                    menu.classList.toggle('show');
                    activeMenu = menu.classList.contains('show') ? menu : null;
                }
            });
        }
        // Ecouteur pour C2 (liste et condensation)
        if (cell.id === 'c2') {
             cell.addEventListener('click', function (e) {
                // Empecher l'interaction si la tâche est en pause
                if (isTaskPaused) {
                    showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
                    return;
                }
                const item = e.target.closest('.location-item');
                if (item) {
                    e.stopPropagation();
                    const currentState = parseInt(item.dataset.colorState || 0);
                    const newState = (currentState + 1) % 3;
                    item.classList.remove('text-green-c2', 'text-red-c2');
                    item.dataset.colorState = '0';
                    if (newState === 1) {
                        item.classList.add('text-green-c2');
                        item.dataset.colorState = '1';
                    } else if (newState === 2) {
                        item.classList.add('text-red-c2');
                        item.dataset.colorState = '2';
                    }
                    updateResults();
                } else {
                    const c2Cell = document.getElementById('c2');
                    if (c2Cell?.classList.contains('c2-condensed-green') || c2Cell?.classList.contains('c2-condensed-red')) {
                        if (selectedLocale) {
                            loadControlLocationsForLocale(selectedLocale, true);
                        } else {
                            showC2Buttons();
                        }
                    }
                }
            });
        }
        // Ecouteur pour C3 (cycle de couleurs)
        if (cell.id === 'c3') {
             cell.addEventListener('click', function () {
                // Empecher l'interaction si la tâche est en pause
                if (isTaskPaused) {
                    showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
                    return;
                }
                let state = parseInt(this.dataset.colorState || 0);
                state = (state + 1) % 3;
                this.classList.remove('required-yellow', 'text-green', 'text-red');
                this.querySelector('.cell-content').style.color = '';
                if (state === 1) {
                    this.classList.add('text-green');
                    this.querySelector('.cell-content').textContent = 'X';
                } else if (state === 2) {
                    this.classList.add('text-red');
                    this.querySelector('.cell-content').textContent = 'X';
                } else {
                    this.classList.add('required-yellow');
                    this.querySelector('.cell-content').textContent = 'Contrôle Xylophage';
                }
                this.dataset.colorState = state.toString();
                updateResults();
            });
        }
    });

    // Ecouteur specifique pour A1 (gestion du menu et de la pause)
    document.getElementById('a1')?.addEventListener('click', handleA1Click);

    // Ecouteur pour le bouton Refresh
    document.getElementById('refresh-button')?.addEventListener('click', function() {
         // Empecher l'interaction si la tâche est en pause
        if (isTaskPaused) {
            showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
            return;
        }
        manualRefresh();
    });

    // Gestion des clics sur les elements du menu deroulant (pour toutes les cellules)
    document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.addEventListener('click', function (e) {
            const item = e.target.closest('.dropdown-item');
            if (item) {
                e.stopPropagation();
                const cell = this.closest('.cell');
                const contentSpan = cell?.querySelector('.cell-content');
                if (!contentSpan) return;
                let newText = item.querySelector('.dropdown-item-content')?.textContent.trim();
                if (newText?.toLowerCase() === 'vide') {
                    const initialText = cell.getAttribute('data-initial-text');
                    contentSpan.textContent = initialText;
                    contentSpan.classList.add('placeholder');
                } else {
                    contentSpan.textContent = newText;
                    contentSpan.classList.remove('placeholder');
                }
                if (cell.id === 'a1') {
                    const itemId = item.id;
                    if (itemId === 'dropdown-pause-btn-a1') {
                        // --- MODIFICATION ICI ---
                        // Appeler handlePauseTask, qui gère maintenant la vérification et le verrouillage
                        handlePauseTask();
                        // Fermer le menu et réinitialiser activeMenu
                        this.classList.remove('show');
                        activeMenu = null;
                        return;
                        // --- FIN DE LA MODIFICATION ---
                    } else if (itemId === 'dropdown-fin-btn-a1') {
                         // Empecher l'interaction si la tâche est en pause
                        if (isTaskPaused) {
                            showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
                            this.classList.remove('show');
                            activeMenu = null;
                            return;
                        }
                        handleFinTask();
                        this.classList.remove('show');
                        activeMenu = null;
                        return;
                    } else {
                        // Empecher l'interaction si la tâche est en pause
                        if (isTaskPaused) {
                            showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
                            this.classList.remove('show');
                            activeMenu = null;
                            return;
                        }
                        if (selectedLocale && selectedLocale !== newText) {
                            savePreviousTaskState(selectedLocale);
                        }
                        selectedLocale = newText;
                        cell.classList.remove('required-yellow');
                        cell.classList.add('user-locale-selected');
                        loadControlLocationsForLocale(selectedLocale, false);
                        const a2ContentSpan = document.getElementById('a2')?.querySelector('.cell-content');
                        if (a2ContentSpan) {
                            a2ContentSpan.textContent = new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
                            a2ContentSpan.classList.remove('placeholder');
                        }
                        taskStartTime = new Date();
                        showA1Buttons();
                    }
                } else if (cell.id === 'd1') {
                    // Empecher l'interaction si la tâche est en pause
                    if (isTaskPaused) {
                        showNotification("La tâche est en pause. Cliquez sur REPRENDRE pour continuer.");
                        this.classList.remove('show');
                        activeMenu = null;
                        return;
                    }
                    if (newText.includes('?')) {
                        newText = newText.substring(2, newText.indexOf(' ('));
                    }
                    setDefaultUser(newText);
                    cell.classList.remove('required-yellow');
                    cell.classList.add('user-locale-selected');
                }
                contentSpan.style.color = '';
            }
            this.classList.remove('show');
            activeMenu = null;
        });
    });

    // Fermeture des menus et condensation de C2 au clic ailleurs
    document.addEventListener('click', function (e) {
        if (activeMenu) {
            activeMenu.classList.remove('show');
            activeMenu = null;
        }
        const c2Cell = document.getElementById('c2');
        if (c2Cell?.querySelector('.location-list') && !c2Cell.contains(e.target)) {
            const redItems = c2Cell.querySelectorAll('.location-item.text-red-c2').length;
            const greenItems = c2Cell.querySelectorAll('.location-item.text-green-c2').length;
            if (redItems > 0) {
                condenseC2(`${redItems}R`);
            } else if (greenItems > 0) {
                condenseC2('xR');
            } else {
                condenseC2('xR');
            }
            updateResults();
        }
    });
});
